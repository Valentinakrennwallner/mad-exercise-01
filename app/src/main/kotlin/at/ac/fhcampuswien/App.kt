/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("Welcome to the Number Guessing Game!")
        println("I have generated a random $digitsToGuess-digit number where each digit is unique. Try to guess it!")
        //println("Generated number: $generatedNumber") // für Debugging

        var guess: Int
        var result: CompareResult
        do {
            println("Enter your guess:")
            val userInput = readLine() ?: ""
            guess = userInput.toIntOrNull() ?: -1 // Setzt guess auf -1, wenn die Eingabe keine gültige Zahl ist
            result = checkUserInputAgainstGeneratedNumber(guess, generatedNumber)
            println("Output: ${result.n}:${result.m}")
        } while (result.m != digitsToGuess)

        println("Congratulations! You've guessed the number correctly: $generatedNumber")
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length < 1 || length > 9) {
            throw IllegalArgumentException("Length must be between 1 and 9.")
        }

        val digits = (1..9).toList()
        val shuffledDigits = digits.shuffled().take(length)
        val number = shuffledDigits.joinToString("").toInt()

        number
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */

    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val inputStr = input.toString()             // werden in String umgewandelt, um leichter auf
        val generatedStr = generatedNumber.toString()   //Ziffern einzeln zugreifen zu können.

        if (inputStr.length != generatedStr.length) {   // Input Zahl muss gleichlang wie generiertere Zahl sein (hier: 4)
            throw IllegalArgumentException("Inputs must have the same number of digits.")
        }

        var correctPositions = 0        // Ziffern in der korrekten Position (m)
        var correctDigits = 0           // Korrekte Ziffern, unabhängig von der Position (n)
        val seenInGenerated = BooleanArray(10)
        val seenInInput = BooleanArray(10)


        // Zähle richitge Positionen
        for (i in inputStr.indices) {
            val digitValue = inputStr[i] - '0'              // Konvertiert  Charakter an Position i zu entsprechenden Integer-Wert
            if (inputStr[i] == generatedStr[i]) {
                correctPositions++                          // Erhöht für korrekten Positionen, wenn Zeichen an Position i in Benutzereingabe = Zeichen in generierten Zahl
                seenInGenerated[digitValue] = true          // Markiert Wert als gesehen in 'seenInGenerated'
                seenInInput[digitValue] = true              // Markiert Wert als gesehen in 'seenInInput'

            }
        }

        // Zähle korrekten Ziffern, die nicht an richtigen Position sind
        for (i in inputStr.indices) {
            val digitValue = inputStr[i] - '0'          // Konvertiert  Charakter an Position i zu entsprechenden Integer-Wert
            if (inputStr[i] != generatedStr[i] && !seenInInput[digitValue] && generatedStr.contains(inputStr[i])) {
                // Überprüft, ob Zeichen an Position i in Benutzereinagbe != Zeichen an gleicher Position in gleicher Position von generierter Zahl ist
                // & ob Wert noch nicht als korrekte Ziffer in 'seenInput' markiert wurde
                // & ob generierte Zahl das Zeichen enthält
                correctDigits++                         // Erhöht Zähler für korrekte Ziffern, die nicht an richtigen Position sind
                seenInInput[digitValue] = true          // Markiert den Wert als gesehen in 'seenInInput'
            }
        }


        //val generatedDigitsCount =
        //IntArray(10)                            // Zählt, wie oft jede Ziffer in 'generatedNumber' vorkommt
        //val inputDigitsCount = IntArray(10)     // Zählt, wie oft jede Ziffer in 'inputStr' vorkommt

        // Zuerst die korrekten Positionen zählen und die Häufigkeiten der Ziffern in beiden Zahlen erfassen
        //inputStr.forEachIndexed { index, c ->
            //val digit = c - '0'                 // Konvertiere das Char zu einer Zahl (1-9)
            //if (c == generatedStr[index]) {     // Üperprüft ob 'c' in Benutzereinagbe an der gleichen Position steht, woe generierte Zahl
                //correctPositions++              // Falls ja, wird 'm' um eins erhöht
            //}
            //if (generatedStr.contains(c)) {     // Überprüft, ob Zahl irgendwo in Zahlenreihe vorkommt
                //correctDigits++                 // Falls ja, wird 'n' um eins erhöht
            //}
        //}

        // Berechne `n` basierend auf den Häufigkeiten der Ziffern in beiden Zahlen
        //for (i in 0..9) {
        //    correctDigits += minOf(generatedDigitsCount[i], inputDigitsCount[i])
        // }

        // The total number of correct digits `n` should be the sum of digits in the correct position and those not in the correct position
        correctDigits += correctPositions

        CompareResult(correctDigits, correctPositions)// Rückmeldung des Statuses, n:m
    }
}

fun main() {
    val app = App()
    app.playNumberGame()
}
